// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testtreewidget.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the TestTreeWidget module
	public static void aCT_Node_Delete(IContext context, testtreewidget.proxies.Node _node)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Node", _node == null ? null : _node.getMendixObject());
		Core.microflowCall("TestTreeWidget.ACT_Node_Delete").withParams(params).execute(context);
	}
	public static void aCT_Node_New(IContext context, testtreewidget.proxies.TestContainer _testContainer, testtreewidget.proxies.UserContext _userContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TestContainer", _testContainer == null ? null : _testContainer.getMendixObject());
		params.put("UserContext", _userContext == null ? null : _userContext.getMendixObject());
		Core.microflowCall("TestTreeWidget.ACT_Node_New").withParams(params).execute(context);
	}
	public static void aCT_Node_OnGridRowSelected(IContext context, testtreewidget.proxies.TestContainer _testContainer, testtreewidget.proxies.UserContext _userContext, testtreewidget.proxies.Node _node)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TestContainer", _testContainer == null ? null : _testContainer.getMendixObject());
		params.put("UserContext", _userContext == null ? null : _userContext.getMendixObject());
		params.put("Node", _node == null ? null : _node.getMendixObject());
		Core.microflowCall("TestTreeWidget.ACT_Node_OnGridRowSelected").withParams(params).execute(context);
	}
	public static void aCT_Node_Save(IContext context, testtreewidget.proxies.Node _node)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Node", _node == null ? null : _node.getMendixObject());
		Core.microflowCall("TestTreeWidget.ACT_Node_Save").withParams(params).execute(context);
	}
	public static void aCT_Open_UnlimitedDepth(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("TestTreeWidget.ACT_Open_UnlimitedDepth").withParams(params).execute(context);
	}
	public static void aCT_TestContainer_OpenTreePage(IContext context, testtreewidget.proxies.TestContainer _testContainer, testtreewidget.proxies.UserContext _userContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TestContainer", _testContainer == null ? null : _testContainer.getMendixObject());
		params.put("UserContext", _userContext == null ? null : _userContext.getMendixObject());
		Core.microflowCall("TestTreeWidget.ACT_TestContainer_OpenTreePage").withParams(params).execute(context);
	}
	public static boolean aCT_TestContainer_SaveNew(IContext context, testtreewidget.proxies.TestContainer _testContainer)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TestContainer", _testContainer == null ? null : _testContainer.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("TestTreeWidget.ACT_TestContainer_SaveNew").withParams(params).execute(context);
	}
	public static testtreewidget.proxies.GetDataResponse pRS_UserContext_GetNodeList(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("TestTreeWidget.PRS_UserContext_GetNodeList").withParams(params).execute(context);
		return result == null ? null : testtreewidget.proxies.GetDataResponse.initialize(context, result);
	}
	public static void sUB_Node_UpdateChildrenList(IContext context, testtreewidget.proxies.Node _parentNode)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ParentNode", _parentNode == null ? null : _parentNode.getMendixObject());
		Core.microflowCall("TestTreeWidget.SUB_Node_UpdateChildrenList").withParams(params).execute(context);
	}
	public static void sUB_TestContainer_OpenTreePage(IContext context, testtreewidget.proxies.TestContainer _testContainer, testtreewidget.proxies.UserContext _userContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TestContainer", _testContainer == null ? null : _testContainer.getMendixObject());
		params.put("UserContext", _userContext == null ? null : _userContext.getMendixObject());
		Core.microflowCall("TestTreeWidget.SUB_TestContainer_OpenTreePage").withParams(params).execute(context);
	}
	public static testtreewidget.proxies.UserContext sUB_UserContext_GetOrCreate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("TestTreeWidget.SUB_UserContext_GetOrCreate").withParams(params).execute(context);
		return result == null ? null : testtreewidget.proxies.UserContext.initialize(context, result);
	}
	public static boolean vAL_Node(IContext context, testtreewidget.proxies.Node _node)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Node", _node == null ? null : _node.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("TestTreeWidget.VAL_Node").withParams(params).execute(context);
	}
	public static boolean vAL_TestContainer(IContext context, testtreewidget.proxies.TestContainer _testContainer)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TestContainer", _testContainer == null ? null : _testContainer.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("TestTreeWidget.VAL_TestContainer").withParams(params).execute(context);
	}
}
